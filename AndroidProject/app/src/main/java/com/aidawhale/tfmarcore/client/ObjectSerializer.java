package com.aidawhale.tfmarcore.client;

import android.util.Log;

import com.aidawhale.tfmarcore.room.Game;
import com.aidawhale.tfmarcore.room.Survey;
import com.aidawhale.tfmarcore.room.User;
import com.aidawhale.tfmarcore.utils.DateConverter;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;

import java.lang.reflect.Type;
import java.util.Date;

public class ObjectSerializer implements JsonSerializer {

    @Override
    public JsonElement serialize(Object src, Type typeOfSrc, JsonSerializationContext context) {

        if (User.class.equals(src.getClass())) {
            return serializeUser((User) src);
        }
        if (Game.class.equals(src.getClass())) {
            return serializeGame((Game) src);
        }
        if (Survey.class.equals(src.getClass())) {
            return serializeSurvey((Survey) src);
        }

        Log.d("ObjectSerializer:", "Something went wrong during " +
                src.getClass().toString() + " object serialization :(");
        return null;
    }

    // Django USER model
    //      --  pk (int)
    //    user_id (CharField)
    //    storage_permission (bool)
    //    height (float)
    //    difficulty_level (int) [1..3]
    //    age (int) [1990..2050]
    //    last_update (not needed)
    //    creation_date (DateTimeField)
    private JsonElement serializeUser(User user) {

        JsonObject json = new JsonObject();

        json.addProperty("user_id", user.userID);
        json.addProperty("user_storage_permission", user.storagePermission);

        // TODO FIX: this isn't the real date, it's the date when the user was added to remote DB...
        json.addProperty("user_creation_date",
                DateConverter.complexDateToSimpleDate(new Date()));

        // we don't have this info on app when creating a new user
        json.addProperty("user_height", "null");
        json.addProperty("user_difficulty_level", "null");
        json.addProperty("user_age", "null");

        Log.d("ObjectSerializer:", "user was serialized with DATE = '" +
                json.get("creation_date") + "'");

        return json;
    }

    // Django GAME model
    //      -- id (int) Autogenerated
    //    user (int) ForeignKey => user.pk
    //    game_type (int) [1..3]
    //    time (int)
    //    steps (int)
    //    date (DateTimeField) [default=timezone.now]
    private JsonElement serializeGame(Game game) {

        JsonObject json = new JsonObject();

        json.addProperty("game_user_id", game.user);
        json.addProperty("game_type", game.game_type);
        json.addProperty("game_time", game.time);
        json.addProperty("game_steps", game.steps);
        json.addProperty("game_date", game.date);

        Log.d("ObjectSerializer:", "game was serialized (user " + game.user + ")");

        return json;
    }

    // Django SURVEY model
    //      -- id (int) Autogenerated
    //    date (DateTimeField) [default=timezone.now]
    //    user (int) ForeignKey => user.pk
    //    happiness (int) [0..4]
    //    food (int) [0..4]
    //    pain (int) [0..4]
    private JsonElement serializeSurvey(Survey survey) {

        JsonObject json = new JsonObject();

        json.addProperty("survey_date", survey.date);
        json.addProperty("survey_user", survey.user);
        json.addProperty("survey_happiness", survey.happiness);
        json.addProperty("survey_food", survey.food);
        json.addProperty("survey_pain", survey.pain);

        Log.d("ObjectSerializer:", "survey was serialized (user " + survey.user + ")");

        return json;
    }
}
